{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/assets/main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\n// var $ = require('jquery');\n\n// var fullpage = require('fullpage.js');\n// var Barba = require('barba.js');\n\n// variables\nvar\n    $isAnimatedSecond = $('.second .is-animated'),\n    $isAnimatedThird = $('.third .is-animated'),\n    $isAnimatedFourth = $('.fourth .is-animated'),\n    $isAnimatedFifth = $('.fifth .is-animated');\n    $isAnimatedSixth = $('.sixth .is-animated');\n\n$('#fullpage').fullpage({\n    licenseKey: 'xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx',\n    verticalCentered: true,\n    lockAnchors: true,\n    anchors: ['1', '2', '3', '4', '5', 'last'],\n    navigation: true,\n    navigationTooltips: ['MasterDynamix',  'What we do', 'Your success', 'Slider', 'Our expertise', 'Reach us'],\n    showActiveTooltip: false,\n    menu: '#menu',\n    // sectionsColor: ['#fff',  '#fff', '#fff', '#fff', '#fff'],\n    scrollOverflow: true,\n    afterRender: function(){\n\n        particlesJS.load('particles-js', 'assets/particles.json', function() {\n            console.log('callback - particles.js config loaded');\n        });\n        \n        //slick\n        jQuery('.slider').slick({\n            dots: true,\n            infinite: true,\n            speed: 650,\n            autoplay: true,\n            prevArrow: '<span class=\"slick-prev\"><i class=\"fas fa-chevron-left fa-2x\"></i></span>',\n            nextArrow: '<span class=\"slick-next\"><i class=\"fas fa-chevron-right fa-2x\"></i></span>',\n            autoplaySpeed: 4000,\n            responsive: [\n                {\n                  breakpoint: 767,\n                  settings: {\n                    arrows: false\n                  }\n                }\n            ]\n        });\n\n    },\n    afterLoad: function(origin, destination){\n        //using destination\n        console.log(destination.anchor);\n        if(destination.anchor == 'last'){\n            $('*[data-open=\"popup-trigger\"]').addClass('not-active')\n\n        } else {\n            $('*[data-open=\"popup-trigger\"]').removeClass('not-active')\n        }\n        // console.log(fullpage_api.getActiveSection());\n    },\n    onLeave: function(origin, nextIndex) {\n        \n        // first animation\n        if( origin.index == 0 && nextIndex.index == 1 ) {\n            $isAnimatedSecond.addClass('animated');\n            $isAnimatedSecond.eq(0).addClass('animated fadeIn').css('animation-delay', '0.2s');\n            $isAnimatedSecond.eq(1).addClass('animated fadeIn').css('animation-delay', '0.4s');\n            $isAnimatedSecond.eq(2).addClass('animated fadeIn').css('animation-delay', '0.8s');\n        }\n        // second animation\n        else if( origin.index == 1 && nextIndex.index == 2 ) {\n            $isAnimatedThird.addClass('animated');\n            $isAnimatedThird.eq(0).addClass('fadeInLeftBig').css('animation-delay', '.2s');\n            $isAnimatedThird.eq(1).addClass('fadeInUpBig').css('animation-delay', '.4s');\n            // $isAnimatedSecondSingle.addClass('animated rollIn').css('animation-delay', '1.7s');\n        }\n\n        // third animation\n        else if( ( origin.index == 1 || origin.index == 2 ) && nextIndex.index == 3 ) {\n            $isAnimatedFourth.eq(0).addClass('animated fadeIn').css('animation-delay', '0.2s');\n            $isAnimatedFourth.eq(1).addClass('animated fadeIn').css('animation-delay', '0.7s');\n        }\n\n\n        // fourth animation\n        else if( ( origin.index == 1 || origin.index == 2 || origin.index == 3 ) && nextIndex.index == 4 ) {\n            $isAnimatedFifth.eq(0).addClass('animated zoomIn').css('animation-delay', '.1s');\n            $isAnimatedFifth.eq(1).addClass('animated zoomIn').css('animation-delay', '.5s');\n\n        }\n        \n        else if( ( origin.index == 1 || origin.index == 2 || origin.index == 3 || origin.index == 4 ) && nextIndex.index == 5 ) {\n            $isAnimatedSixth.eq(0).addClass('animated zoomIn').css('animation-delay', '.3s');\n        }\n    }\n});\n\n$('#arrowAnim').click(function(){\n    $.fn.fullpage.moveSectionDown();\n});\n\n$(document).ready(function() {\n    $('body').fadeTo( \"fast\", 1 );\n    if($('body').hasClass(\"tingle-enabled\")){\n        fullpage_api.setAllowScrolling(false);\n    } else {\n        fullpage_api.setAllowScrolling(true);\n    }\n});\n\nif (window.location.href.indexOf(\"partners\") > -1) {\n    $('#fullpage-projects').fullpage({\n        licenseKey: 'xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx',\n        verticalCentered: false,\n        lockAnchors: true,\n        anchors: ['FreeHomeRisk', 'HazardHub', 'AgentRiskView', 'KeyNein', 'UnderNDA', 'TrueReviewCasino', 'Jeeffy'],\n        navigation: true,\n        navigationTooltips: ['FreeHomeRisk', 'HazardHub', 'AgentRiskView', 'KeyNein', 'UnderNDA', 'TrueReviewCasino', 'Jeeffy'],\n        showActiveTooltip: true,\n        menu: '#menu',\n        sectionsColor: ['#fff', '#f7f7f7', '#fff', '#f7f7f7', '#fff', '#f7f7f7', '#fff', '#f7f7f7'],\n        //disabled in mobile\n        responsiveWidth: 767,\n        afterResponsive: function(isResponsive){},\n        afterRender: function(){\n            var myModalContent = new tingle.modal({\n                onOpen: function() {\n                    fullpage_api.setAllowScrolling(false);\n                },\n                onClose: function() {\n                    fullpage_api.setAllowScrolling(true);\n                }\n            });\n            var myBtn = document.querySelectorAll(\".js-tingle-modal\");\n            function myHandler() {\n                myModalContent.open();\n                if (this.hasAttribute(\"data-btn\")) {\n                    myModalContent.setContent(document.querySelector(\".project\" + this.getAttribute(\"data-btn\") + \"-modal\").innerHTML);\n                } else {\n                    myModalContent.setContent(document.querySelector(\".project1-modal\").innerHTML);\n                }\n            }\n            for (var i = 0; i < myBtn.length; i++) {\n                myBtn[i].addEventListener(\"click\", myHandler);\n            }\n            \n        }\n    });\n}\n\n\n\n// Barba.Dispatcher.on('newPageReady', function(current, prev, container) {\n//     if ( $( 'html' ).hasClass( 'fp-enabled' ) ) {\n//         $.fn.fullpage.destroy('all');\n//     }\n//\n//\n// });\n//\n// $(document).ready(function() {\n//     Barba.Pjax.start();\n//     var FadeTransition = Barba.BaseTransition.extend({\n//         start: function() {\n//             /**\n//              * This function is automatically called as soon the Transition starts\n//              * this.newContainerLoading is a Promise for the loading of the new container\n//              * (Barba.js also comes with an handy Promise polyfill!)\n//              */\n//\n//             // As soon the loading is finished and the old page is faded out, let's fade the new page\n//             Promise\n//                 .all([this.newContainerLoading, this.fadeOut()])\n//                 .then(this.fadeIn.bind(this));\n//         },\n//\n//         fadeOut: function() {\n//             /**\n//              * this.oldContainer is the HTMLElement of the old Container\n//              */\n//\n//             return $(this.oldContainer).animate({ opacity: 0 }).promise();\n//         },\n//\n//         fadeIn: function() {\n//             /**\n//              * this.newContainer is the HTMLElement of the new Container\n//              * At this stage newContainer is on the DOM (inside our #barba-container and with visibility: hidden)\n//              * Please note, newContainer is available just after newContainerLoading is resolved!\n//              */\n//\n//             var _this = this;\n//             var $el = $(this.newContainer);\n//\n//             $(this.oldContainer).hide();\n//\n//             $el.css({visibility : 'visible',\n//                 opacity : 0\n//             });\n//\n//             $el.animate({ opacity: 1 }, 400, function() {\n//                 /**\n//                  * Do not forget to call .done() as soon your transition is finished!\n//                  * .done() will automatically remove from the DOM the old Container\n//                  */\n//\n//                 _this.done();\n//             });\n//         }\n//     });\n//\n//     /**\n//      * Next step, you have to tell Barba to use the new Transition\n//      */\n//\n//     Barba.Pjax.getTransition = function() {\n//         /**\n//          * Here you can use your own logic!\n//          * For example you can use different Transition based on the current page or link...\n//          */\n//\n//         return FadeTransition;\n//     };\n//\n// });\n//\n//\n\nfunction validEmail(email) { // see:\n    var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n    return re.test(email);\n}\n\nfunction validateHuman(honeypot) {\n    if (honeypot) {  //if hidden form filled up\n        console.log(\"Robot Detected!\");\n        return true;\n    } else {\n        console.log(\"Welcome Human!\");\n    }\n}\n\n// get all data in form and return object\nfunction getFormData() {\n    var form = document.getElementById(\"gform\");\n    var elements = form.elements; // all form elements\n    var fields = Object.keys(elements).filter(function(k) {\n        // the filtering logic is simple, only keep fields that are not the honeypot\n        return (elements[k].name !== \"honeypot\");\n    }).map(function(k) {\n        if(elements[k].name !== undefined) {\n            return elements[k].name;\n            // special case for Edge's html collection\n        }else if(elements[k].length > 0){\n            return elements[k].item(0).name;\n        }\n    }).filter(function(item, pos, self) {\n        return self.indexOf(item) == pos && item;\n    });\n    var data = {};\n    fields.forEach(function(k){\n        data[k] = elements[k].value;\n        var str = \"\"; // declare empty string outside of loop to allow\n                      // it to be appended to for each item in the loop\n        if(elements[k].type === \"checkbox\"){ // special case for Edge's html collection\n            str = str + elements[k].checked + \", \"; // take the string and append\n                                                    // the current checked value to\n                                                    // the end of it, along with\n                                                    // a comma and a space\n            data[k] = str.slice(0, -2); // remove the last comma and space\n                                        // from the  string to make the output\n                                        // prettier in the spreadsheet\n        }else if(elements[k].length){\n            for(var i = 0; i < elements[k].length; i++){\n                if(elements[k].item(i).checked){\n                    str = str + elements[k].item(i).value + \", \"; // same as above\n                    data[k] = str.slice(0, -2);\n                }\n            }\n        }\n    });\n\n    // add form-specific values into the data\n    data.formDataNameOrder = JSON.stringify(fields);\n    data.formGoogleSheetName = form.dataset.sheet || \"responses\"; // default sheet name\n    data.formGoogleSendEmail = form.dataset.email || \"\"; // no email by default\n\n    console.log(data);\n    return data;\n}\n\nfunction handleFormSubmit(event) {  // handles form submit withtout any jquery\n    event.preventDefault();           // we are submitting via xhr below\n    var data = getFormData();         // get the values submitted in the form\n\n    /* OPTION: Remove this comment to enable SPAM prevention, see README.md\n     if (validateHuman(data.honeypot)) {  //if form is filled, form will not be submitted\n     return false;\n     }\n     */\n\n    if( data.email && !validEmail(data.email) ) {   // if email is not valid show error\n        var invalidEmail = document.getElementById(\"email-invalid\");\n        if (invalidEmail) {\n            invalidEmail.style.display = \"block\";\n            return false;\n        }\n    } else {\n        var url = event.target.action;  //\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', url);\n        // xhr.withCredentials = true;\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.onreadystatechange = function() {\n            console.log( xhr.status, xhr.statusText )\n            console.log(xhr.responseText);\n            document.getElementById(\"gform\").style.display = \"none\"; // hide form\n            var thankYouMessage = document.getElementById(\"thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n            return;\n        };\n        // url encode form data for sending as post data\n        var encoded = Object.keys(data).map(function(k) {\n            return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k])\n        }).join('&')\n        xhr.send(encoded);\n    }\n}\nfunction loaded() {\n    console.log(\"Contact form submission handler loaded successfully.\");\n    // bind to the submit event of our form\n    var form = document.getElementById(\"gform\");\n    form.addEventListener(\"submit\", handleFormSubmit, false);\n};\ndocument.addEventListener(\"DOMContentLoaded\", loaded, false);\n\nif (window.location.href.indexOf(\"index\") > -1) {\n    // get all data in form and return object\n    function getFormData2() {\n        var form = document.getElementById(\"gform2\");\n        var elements = form.elements; // all form elements\n        var fields = Object.keys(elements).map(function(k) {\n            if(elements[k].name !== undefined) {\n                return elements[k].name;\n                // special case for Edge's html collection\n            }else if(elements[k].length > 0){\n                return elements[k].item(0).name;\n            }\n        }).filter(function(item, pos, self) {\n            return self.indexOf(item) == pos && item;\n        });\n        var data = {};\n        fields.forEach(function(k){\n            data[k] = elements[k].value;\n            var str = \"\"; // declare empty string outside of loop to allow\n                        // it to be appended to for each item in the loop\n            if(elements[k].type === \"checkbox\"){ // special case for Edge's html collection\n                str = str + elements[k].checked + \", \"; // take the string and append\n                                                        // the current checked value to\n                                                        // the end of it, along with\n                                                        // a comma and a space\n                data[k] = str.slice(0, -2); // remove the last comma and space\n                                            // from the  string to make the output\n                                            // prettier in the spreadsheet\n            }else if(elements[k].length){\n                for(var i = 0; i < elements[k].length; i++){\n                    if(elements[k].item(i).checked){\n                        str = str + elements[k].item(i).value + \", \"; // same as above\n                        data[k] = str.slice(0, -2);\n                    }\n                }\n            }\n        });\n\n        // add form-specific values into the data\n        data.formDataNameOrder = JSON.stringify(fields);\n        data.formGoogleSheetName = form.dataset.sheet || \"responses\"; // default sheet name\n        data.formGoogleSendEmail = form.dataset.email || \"\"; // no email by default\n\n        console.log(data);\n        return data;\n    }\n\n    function handleFormSubmit2(event) {  // handles form submit withtout any jquery\n        event.preventDefault();           // we are submitting via xhr below\n        var data = getFormData2();         // get the values submitted in the form\n\n        /* OPTION: Remove this comment to enable SPAM prevention, see README.md\n        if (validateHuman(data.honeypot)) {  //if form is filled, form will not be submitted\n        return false;\n        }\n        */\n\n        if( !validEmail(data.email) ) {   // if email is not valid show error\n            document.getElementById('email-invalid2').style.display = 'block';\n            return false;\n        } else {\n            var url = event.target.action;  //\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url);\n            // xhr.withCredentials = true;\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            xhr.onreadystatechange = function() {\n                console.log( xhr.status, xhr.statusText )\n                console.log(xhr.responseText);\n                document.getElementById('gform2').style.display = 'none'; // hide form\n                document.getElementById('thankyou_message2').style.display = 'block';\n                return;\n            };\n            // url encode form data for sending as post data\n            var encoded = Object.keys(data).map(function(k) {\n                return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])\n            }).join('&')\n            xhr.send(encoded);\n        }\n    }\n    function loaded2() {\n        console.log('contact form submission handler loaded successfully');\n        // bind to the submit event of our form\n        var form = document.getElementById('gform2');\n        form.addEventListener(\"submit\", handleFormSubmit2, false);\n    };\n    document.addEventListener('DOMContentLoaded', loaded2, false);\n};"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXNzZXRzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXG4vLyB2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG4vLyB2YXIgZnVsbHBhZ2UgPSByZXF1aXJlKCdmdWxscGFnZS5qcycpO1xuLy8gdmFyIEJhcmJhID0gcmVxdWlyZSgnYmFyYmEuanMnKTtcblxuLy8gdmFyaWFibGVzXG52YXJcbiAgICAkaXNBbmltYXRlZFNlY29uZCA9ICQoJy5zZWNvbmQgLmlzLWFuaW1hdGVkJyksXG4gICAgJGlzQW5pbWF0ZWRUaGlyZCA9ICQoJy50aGlyZCAuaXMtYW5pbWF0ZWQnKSxcbiAgICAkaXNBbmltYXRlZEZvdXJ0aCA9ICQoJy5mb3VydGggLmlzLWFuaW1hdGVkJyksXG4gICAgJGlzQW5pbWF0ZWRGaWZ0aCA9ICQoJy5maWZ0aCAuaXMtYW5pbWF0ZWQnKTtcbiAgICAkaXNBbmltYXRlZFNpeHRoID0gJCgnLnNpeHRoIC5pcy1hbmltYXRlZCcpO1xuXG4kKCcjZnVsbHBhZ2UnKS5mdWxscGFnZSh7XG4gICAgbGljZW5zZUtleTogJ3h4eHh4eHh4LXh4eHh4eHh4LXh4eHh4eHh4LXh4eHh4eHh4JyxcbiAgICB2ZXJ0aWNhbENlbnRlcmVkOiB0cnVlLFxuICAgIGxvY2tBbmNob3JzOiB0cnVlLFxuICAgIGFuY2hvcnM6IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJ2xhc3QnXSxcbiAgICBuYXZpZ2F0aW9uOiB0cnVlLFxuICAgIG5hdmlnYXRpb25Ub29sdGlwczogWydNYXN0ZXJEeW5hbWl4JywgICdXaGF0IHdlIGRvJywgJ1lvdXIgc3VjY2VzcycsICdTbGlkZXInLCAnT3VyIGV4cGVydGlzZScsICdSZWFjaCB1cyddLFxuICAgIHNob3dBY3RpdmVUb29sdGlwOiBmYWxzZSxcbiAgICBtZW51OiAnI21lbnUnLFxuICAgIC8vIHNlY3Rpb25zQ29sb3I6IFsnI2ZmZicsICAnI2ZmZicsICcjZmZmJywgJyNmZmYnLCAnI2ZmZiddLFxuICAgIHNjcm9sbE92ZXJmbG93OiB0cnVlLFxuICAgIGFmdGVyUmVuZGVyOiBmdW5jdGlvbigpe1xuXG4gICAgICAgIHBhcnRpY2xlc0pTLmxvYWQoJ3BhcnRpY2xlcy1qcycsICdhc3NldHMvcGFydGljbGVzLmpzb24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsYmFjayAtIHBhcnRpY2xlcy5qcyBjb25maWcgbG9hZGVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy9zbGlja1xuICAgICAgICBqUXVlcnkoJy5zbGlkZXInKS5zbGljayh7XG4gICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICBzcGVlZDogNjUwLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICBwcmV2QXJyb3c6ICc8c3BhbiBjbGFzcz1cInNsaWNrLXByZXZcIj48aSBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLWxlZnQgZmEtMnhcIj48L2k+PC9zcGFuPicsXG4gICAgICAgICAgICBuZXh0QXJyb3c6ICc8c3BhbiBjbGFzcz1cInNsaWNrLW5leHRcIj48aSBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLXJpZ2h0IGZhLTJ4XCI+PC9pPjwvc3Bhbj4nLFxuICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogNDAwMCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgIH0sXG4gICAgYWZ0ZXJMb2FkOiBmdW5jdGlvbihvcmlnaW4sIGRlc3RpbmF0aW9uKXtcbiAgICAgICAgLy91c2luZyBkZXN0aW5hdGlvblxuICAgICAgICBjb25zb2xlLmxvZyhkZXN0aW5hdGlvbi5hbmNob3IpO1xuICAgICAgICBpZihkZXN0aW5hdGlvbi5hbmNob3IgPT0gJ2xhc3QnKXtcbiAgICAgICAgICAgICQoJypbZGF0YS1vcGVuPVwicG9wdXAtdHJpZ2dlclwiXScpLmFkZENsYXNzKCdub3QtYWN0aXZlJylcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnKltkYXRhLW9wZW49XCJwb3B1cC10cmlnZ2VyXCJdJykucmVtb3ZlQ2xhc3MoJ25vdC1hY3RpdmUnKVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGZ1bGxwYWdlX2FwaS5nZXRBY3RpdmVTZWN0aW9uKCkpO1xuICAgIH0sXG4gICAgb25MZWF2ZTogZnVuY3Rpb24ob3JpZ2luLCBuZXh0SW5kZXgpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIGZpcnN0IGFuaW1hdGlvblxuICAgICAgICBpZiggb3JpZ2luLmluZGV4ID09IDAgJiYgbmV4dEluZGV4LmluZGV4ID09IDEgKSB7XG4gICAgICAgICAgICAkaXNBbmltYXRlZFNlY29uZC5hZGRDbGFzcygnYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICRpc0FuaW1hdGVkU2Vjb25kLmVxKDApLmFkZENsYXNzKCdhbmltYXRlZCBmYWRlSW4nKS5jc3MoJ2FuaW1hdGlvbi1kZWxheScsICcwLjJzJyk7XG4gICAgICAgICAgICAkaXNBbmltYXRlZFNlY29uZC5lcSgxKS5hZGRDbGFzcygnYW5pbWF0ZWQgZmFkZUluJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnMC40cycpO1xuICAgICAgICAgICAgJGlzQW5pbWF0ZWRTZWNvbmQuZXEoMikuYWRkQ2xhc3MoJ2FuaW1hdGVkIGZhZGVJbicpLmNzcygnYW5pbWF0aW9uLWRlbGF5JywgJzAuOHMnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZWNvbmQgYW5pbWF0aW9uXG4gICAgICAgIGVsc2UgaWYoIG9yaWdpbi5pbmRleCA9PSAxICYmIG5leHRJbmRleC5pbmRleCA9PSAyICkge1xuICAgICAgICAgICAgJGlzQW5pbWF0ZWRUaGlyZC5hZGRDbGFzcygnYW5pbWF0ZWQnKTtcbiAgICAgICAgICAgICRpc0FuaW1hdGVkVGhpcmQuZXEoMCkuYWRkQ2xhc3MoJ2ZhZGVJbkxlZnRCaWcnKS5jc3MoJ2FuaW1hdGlvbi1kZWxheScsICcuMnMnKTtcbiAgICAgICAgICAgICRpc0FuaW1hdGVkVGhpcmQuZXEoMSkuYWRkQ2xhc3MoJ2ZhZGVJblVwQmlnJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnLjRzJyk7XG4gICAgICAgICAgICAvLyAkaXNBbmltYXRlZFNlY29uZFNpbmdsZS5hZGRDbGFzcygnYW5pbWF0ZWQgcm9sbEluJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnMS43cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcmQgYW5pbWF0aW9uXG4gICAgICAgIGVsc2UgaWYoICggb3JpZ2luLmluZGV4ID09IDEgfHwgb3JpZ2luLmluZGV4ID09IDIgKSAmJiBuZXh0SW5kZXguaW5kZXggPT0gMyApIHtcbiAgICAgICAgICAgICRpc0FuaW1hdGVkRm91cnRoLmVxKDApLmFkZENsYXNzKCdhbmltYXRlZCBmYWRlSW4nKS5jc3MoJ2FuaW1hdGlvbi1kZWxheScsICcwLjJzJyk7XG4gICAgICAgICAgICAkaXNBbmltYXRlZEZvdXJ0aC5lcSgxKS5hZGRDbGFzcygnYW5pbWF0ZWQgZmFkZUluJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnMC43cycpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBmb3VydGggYW5pbWF0aW9uXG4gICAgICAgIGVsc2UgaWYoICggb3JpZ2luLmluZGV4ID09IDEgfHwgb3JpZ2luLmluZGV4ID09IDIgfHwgb3JpZ2luLmluZGV4ID09IDMgKSAmJiBuZXh0SW5kZXguaW5kZXggPT0gNCApIHtcbiAgICAgICAgICAgICRpc0FuaW1hdGVkRmlmdGguZXEoMCkuYWRkQ2xhc3MoJ2FuaW1hdGVkIHpvb21JbicpLmNzcygnYW5pbWF0aW9uLWRlbGF5JywgJy4xcycpO1xuICAgICAgICAgICAgJGlzQW5pbWF0ZWRGaWZ0aC5lcSgxKS5hZGRDbGFzcygnYW5pbWF0ZWQgem9vbUluJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnLjVzJyk7XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZWxzZSBpZiggKCBvcmlnaW4uaW5kZXggPT0gMSB8fCBvcmlnaW4uaW5kZXggPT0gMiB8fCBvcmlnaW4uaW5kZXggPT0gMyB8fCBvcmlnaW4uaW5kZXggPT0gNCApICYmIG5leHRJbmRleC5pbmRleCA9PSA1ICkge1xuICAgICAgICAgICAgJGlzQW5pbWF0ZWRTaXh0aC5lcSgwKS5hZGRDbGFzcygnYW5pbWF0ZWQgem9vbUluJykuY3NzKCdhbmltYXRpb24tZGVsYXknLCAnLjNzJyk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuJCgnI2Fycm93QW5pbScpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgJC5mbi5mdWxscGFnZS5tb3ZlU2VjdGlvbkRvd24oKTtcbn0pO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAkKCdib2R5JykuZmFkZVRvKCBcImZhc3RcIiwgMSApO1xuICAgIGlmKCQoJ2JvZHknKS5oYXNDbGFzcyhcInRpbmdsZS1lbmFibGVkXCIpKXtcbiAgICAgICAgZnVsbHBhZ2VfYXBpLnNldEFsbG93U2Nyb2xsaW5nKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmdWxscGFnZV9hcGkuc2V0QWxsb3dTY3JvbGxpbmcodHJ1ZSk7XG4gICAgfVxufSk7XG5cbmlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKFwicGFydG5lcnNcIikgPiAtMSkge1xuICAgICQoJyNmdWxscGFnZS1wcm9qZWN0cycpLmZ1bGxwYWdlKHtcbiAgICAgICAgbGljZW5zZUtleTogJ3h4eHh4eHh4LXh4eHh4eHh4LXh4eHh4eHh4LXh4eHh4eHh4JyxcbiAgICAgICAgdmVydGljYWxDZW50ZXJlZDogZmFsc2UsXG4gICAgICAgIGxvY2tBbmNob3JzOiB0cnVlLFxuICAgICAgICBhbmNob3JzOiBbJ0ZyZWVIb21lUmlzaycsICdIYXphcmRIdWInLCAnQWdlbnRSaXNrVmlldycsICdLZXlOZWluJywgJ1VuZGVyTkRBJywgJ1RydWVSZXZpZXdDYXNpbm8nLCAnSmVlZmZ5J10sXG4gICAgICAgIG5hdmlnYXRpb246IHRydWUsXG4gICAgICAgIG5hdmlnYXRpb25Ub29sdGlwczogWydGcmVlSG9tZVJpc2snLCAnSGF6YXJkSHViJywgJ0FnZW50Umlza1ZpZXcnLCAnS2V5TmVpbicsICdVbmRlck5EQScsICdUcnVlUmV2aWV3Q2FzaW5vJywgJ0plZWZmeSddLFxuICAgICAgICBzaG93QWN0aXZlVG9vbHRpcDogdHJ1ZSxcbiAgICAgICAgbWVudTogJyNtZW51JyxcbiAgICAgICAgc2VjdGlvbnNDb2xvcjogWycjZmZmJywgJyNmN2Y3ZjcnLCAnI2ZmZicsICcjZjdmN2Y3JywgJyNmZmYnLCAnI2Y3ZjdmNycsICcjZmZmJywgJyNmN2Y3ZjcnXSxcbiAgICAgICAgLy9kaXNhYmxlZCBpbiBtb2JpbGVcbiAgICAgICAgcmVzcG9uc2l2ZVdpZHRoOiA3NjcsXG4gICAgICAgIGFmdGVyUmVzcG9uc2l2ZTogZnVuY3Rpb24oaXNSZXNwb25zaXZlKXt9LFxuICAgICAgICBhZnRlclJlbmRlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBteU1vZGFsQ29udGVudCA9IG5ldyB0aW5nbGUubW9kYWwoe1xuICAgICAgICAgICAgICAgIG9uT3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxwYWdlX2FwaS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbHBhZ2VfYXBpLnNldEFsbG93U2Nyb2xsaW5nKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG15QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qcy10aW5nbGUtbW9kYWxcIik7XG4gICAgICAgICAgICBmdW5jdGlvbiBteUhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgbXlNb2RhbENvbnRlbnQub3BlbigpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShcImRhdGEtYnRuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG15TW9kYWxDb250ZW50LnNldENvbnRlbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0XCIgKyB0aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtYnRuXCIpICsgXCItbW9kYWxcIikuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBteU1vZGFsQ29udGVudC5zZXRDb250ZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdDEtbW9kYWxcIikuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG15QnRuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbXlCdG5baV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG15SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5cblxuLy8gQmFyYmEuRGlzcGF0Y2hlci5vbignbmV3UGFnZVJlYWR5JywgZnVuY3Rpb24oY3VycmVudCwgcHJldiwgY29udGFpbmVyKSB7XG4vLyAgICAgaWYgKCAkKCAnaHRtbCcgKS5oYXNDbGFzcyggJ2ZwLWVuYWJsZWQnICkgKSB7XG4vLyAgICAgICAgICQuZm4uZnVsbHBhZ2UuZGVzdHJveSgnYWxsJyk7XG4vLyAgICAgfVxuLy9cbi8vXG4vLyB9KTtcbi8vXG4vLyAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbi8vICAgICBCYXJiYS5QamF4LnN0YXJ0KCk7XG4vLyAgICAgdmFyIEZhZGVUcmFuc2l0aW9uID0gQmFyYmEuQmFzZVRyYW5zaXRpb24uZXh0ZW5kKHtcbi8vICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgLyoqXG4vLyAgICAgICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGFzIHNvb24gdGhlIFRyYW5zaXRpb24gc3RhcnRzXG4vLyAgICAgICAgICAgICAgKiB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgaXMgYSBQcm9taXNlIGZvciB0aGUgbG9hZGluZyBvZiB0aGUgbmV3IGNvbnRhaW5lclxuLy8gICAgICAgICAgICAgICogKEJhcmJhLmpzIGFsc28gY29tZXMgd2l0aCBhbiBoYW5keSBQcm9taXNlIHBvbHlmaWxsISlcbi8vICAgICAgICAgICAgICAqL1xuLy9cbi8vICAgICAgICAgICAgIC8vIEFzIHNvb24gdGhlIGxvYWRpbmcgaXMgZmluaXNoZWQgYW5kIHRoZSBvbGQgcGFnZSBpcyBmYWRlZCBvdXQsIGxldCdzIGZhZGUgdGhlIG5ldyBwYWdlXG4vLyAgICAgICAgICAgICBQcm9taXNlXG4vLyAgICAgICAgICAgICAgICAgLmFsbChbdGhpcy5uZXdDb250YWluZXJMb2FkaW5nLCB0aGlzLmZhZGVPdXQoKV0pXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4odGhpcy5mYWRlSW4uYmluZCh0aGlzKSk7XG4vLyAgICAgICAgIH0sXG4vL1xuLy8gICAgICAgICBmYWRlT3V0OiBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIC8qKlxuLy8gICAgICAgICAgICAgICogdGhpcy5vbGRDb250YWluZXIgaXMgdGhlIEhUTUxFbGVtZW50IG9mIHRoZSBvbGQgQ29udGFpbmVyXG4vLyAgICAgICAgICAgICAgKi9cbi8vXG4vLyAgICAgICAgICAgICByZXR1cm4gJCh0aGlzLm9sZENvbnRhaW5lcikuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSkucHJvbWlzZSgpO1xuLy8gICAgICAgICB9LFxuLy9cbi8vICAgICAgICAgZmFkZUluOiBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIC8qKlxuLy8gICAgICAgICAgICAgICogdGhpcy5uZXdDb250YWluZXIgaXMgdGhlIEhUTUxFbGVtZW50IG9mIHRoZSBuZXcgQ29udGFpbmVyXG4vLyAgICAgICAgICAgICAgKiBBdCB0aGlzIHN0YWdlIG5ld0NvbnRhaW5lciBpcyBvbiB0aGUgRE9NIChpbnNpZGUgb3VyICNiYXJiYS1jb250YWluZXIgYW5kIHdpdGggdmlzaWJpbGl0eTogaGlkZGVuKVxuLy8gICAgICAgICAgICAgICogUGxlYXNlIG5vdGUsIG5ld0NvbnRhaW5lciBpcyBhdmFpbGFibGUganVzdCBhZnRlciBuZXdDb250YWluZXJMb2FkaW5nIGlzIHJlc29sdmVkIVxuLy8gICAgICAgICAgICAgICovXG4vL1xuLy8gICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbi8vICAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMubmV3Q29udGFpbmVyKTtcbi8vXG4vLyAgICAgICAgICAgICAkKHRoaXMub2xkQ29udGFpbmVyKS5oaWRlKCk7XG4vL1xuLy8gICAgICAgICAgICAgJGVsLmNzcyh7dmlzaWJpbGl0eSA6ICd2aXNpYmxlJyxcbi8vICAgICAgICAgICAgICAgICBvcGFjaXR5IDogMFxuLy8gICAgICAgICAgICAgfSk7XG4vL1xuLy8gICAgICAgICAgICAgJGVsLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDQwMCwgZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICAgICAgLyoqXG4vLyAgICAgICAgICAgICAgICAgICogRG8gbm90IGZvcmdldCB0byBjYWxsIC5kb25lKCkgYXMgc29vbiB5b3VyIHRyYW5zaXRpb24gaXMgZmluaXNoZWQhXG4vLyAgICAgICAgICAgICAgICAgICogLmRvbmUoKSB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIGZyb20gdGhlIERPTSB0aGUgb2xkIENvbnRhaW5lclxuLy8gICAgICAgICAgICAgICAgICAqL1xuLy9cbi8vICAgICAgICAgICAgICAgICBfdGhpcy5kb25lKCk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0pO1xuLy9cbi8vICAgICAvKipcbi8vICAgICAgKiBOZXh0IHN0ZXAsIHlvdSBoYXZlIHRvIHRlbGwgQmFyYmEgdG8gdXNlIHRoZSBuZXcgVHJhbnNpdGlvblxuLy8gICAgICAqL1xuLy9cbi8vICAgICBCYXJiYS5QamF4LmdldFRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgLyoqXG4vLyAgICAgICAgICAqIEhlcmUgeW91IGNhbiB1c2UgeW91ciBvd24gbG9naWMhXG4vLyAgICAgICAgICAqIEZvciBleGFtcGxlIHlvdSBjYW4gdXNlIGRpZmZlcmVudCBUcmFuc2l0aW9uIGJhc2VkIG9uIHRoZSBjdXJyZW50IHBhZ2Ugb3IgbGluay4uLlxuLy8gICAgICAgICAgKi9cbi8vXG4vLyAgICAgICAgIHJldHVybiBGYWRlVHJhbnNpdGlvbjtcbi8vICAgICB9O1xuLy9cbi8vIH0pO1xuLy9cbi8vXG5cbmZ1bmN0aW9uIHZhbGlkRW1haWwoZW1haWwpIHsgLy8gc2VlOlxuICAgIHZhciByZSA9IC9eKFtcXHctXSsoPzpcXC5bXFx3LV0rKSopQCgoPzpbXFx3LV0rXFwuKSpcXHdbXFx3LV17MCw2Nn0pXFwuKFthLXpdezIsNn0oPzpcXC5bYS16XXsyfSk/KSQvaTtcbiAgICByZXR1cm4gcmUudGVzdChlbWFpbCk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSHVtYW4oaG9uZXlwb3QpIHtcbiAgICBpZiAoaG9uZXlwb3QpIHsgIC8vaWYgaGlkZGVuIGZvcm0gZmlsbGVkIHVwXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUm9ib3QgRGV0ZWN0ZWQhXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIldlbGNvbWUgSHVtYW4hXCIpO1xuICAgIH1cbn1cblxuLy8gZ2V0IGFsbCBkYXRhIGluIGZvcm0gYW5kIHJldHVybiBvYmplY3RcbmZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xuICAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnZm9ybVwiKTtcbiAgICB2YXIgZWxlbWVudHMgPSBmb3JtLmVsZW1lbnRzOyAvLyBhbGwgZm9ybSBlbGVtZW50c1xuICAgIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cyhlbGVtZW50cykuZmlsdGVyKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgLy8gdGhlIGZpbHRlcmluZyBsb2dpYyBpcyBzaW1wbGUsIG9ubHkga2VlcCBmaWVsZHMgdGhhdCBhcmUgbm90IHRoZSBob25leXBvdFxuICAgICAgICByZXR1cm4gKGVsZW1lbnRzW2tdLm5hbWUgIT09IFwiaG9uZXlwb3RcIik7XG4gICAgfSkubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgaWYoZWxlbWVudHNba10ubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHNba10ubmFtZTtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgRWRnZSdzIGh0bWwgY29sbGVjdGlvblxuICAgICAgICB9ZWxzZSBpZihlbGVtZW50c1trXS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50c1trXS5pdGVtKDApLm5hbWU7XG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgcG9zLCBzZWxmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT0gcG9zICYmIGl0ZW07XG4gICAgfSk7XG4gICAgdmFyIGRhdGEgPSB7fTtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihrKXtcbiAgICAgICAgZGF0YVtrXSA9IGVsZW1lbnRzW2tdLnZhbHVlO1xuICAgICAgICB2YXIgc3RyID0gXCJcIjsgLy8gZGVjbGFyZSBlbXB0eSBzdHJpbmcgb3V0c2lkZSBvZiBsb29wIHRvIGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXQgdG8gYmUgYXBwZW5kZWQgdG8gZm9yIGVhY2ggaXRlbSBpbiB0aGUgbG9vcFxuICAgICAgICBpZihlbGVtZW50c1trXS50eXBlID09PSBcImNoZWNrYm94XCIpeyAvLyBzcGVjaWFsIGNhc2UgZm9yIEVkZ2UncyBodG1sIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIHN0ciA9IHN0ciArIGVsZW1lbnRzW2tdLmNoZWNrZWQgKyBcIiwgXCI7IC8vIHRha2UgdGhlIHN0cmluZyBhbmQgYXBwZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgY2hlY2tlZCB2YWx1ZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBlbmQgb2YgaXQsIGFsb25nIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGNvbW1hIGFuZCBhIHNwYWNlXG4gICAgICAgICAgICBkYXRhW2tdID0gc3RyLnNsaWNlKDAsIC0yKTsgLy8gcmVtb3ZlIHRoZSBsYXN0IGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdGhlICBzdHJpbmcgdG8gbWFrZSB0aGUgb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldHRpZXIgaW4gdGhlIHNwcmVhZHNoZWV0XG4gICAgICAgIH1lbHNlIGlmKGVsZW1lbnRzW2tdLmxlbmd0aCl7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudHNba10ubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRzW2tdLml0ZW0oaSkuY2hlY2tlZCl7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ciArIGVsZW1lbnRzW2tdLml0ZW0oaSkudmFsdWUgKyBcIiwgXCI7IC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtrXSA9IHN0ci5zbGljZSgwLCAtMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgZm9ybS1zcGVjaWZpYyB2YWx1ZXMgaW50byB0aGUgZGF0YVxuICAgIGRhdGEuZm9ybURhdGFOYW1lT3JkZXIgPSBKU09OLnN0cmluZ2lmeShmaWVsZHMpO1xuICAgIGRhdGEuZm9ybUdvb2dsZVNoZWV0TmFtZSA9IGZvcm0uZGF0YXNldC5zaGVldCB8fCBcInJlc3BvbnNlc1wiOyAvLyBkZWZhdWx0IHNoZWV0IG5hbWVcbiAgICBkYXRhLmZvcm1Hb29nbGVTZW5kRW1haWwgPSBmb3JtLmRhdGFzZXQuZW1haWwgfHwgXCJcIjsgLy8gbm8gZW1haWwgYnkgZGVmYXVsdFxuXG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcm1TdWJtaXQoZXZlbnQpIHsgIC8vIGhhbmRsZXMgZm9ybSBzdWJtaXQgd2l0aHRvdXQgYW55IGpxdWVyeVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7ICAgICAgICAgICAvLyB3ZSBhcmUgc3VibWl0dGluZyB2aWEgeGhyIGJlbG93XG4gICAgdmFyIGRhdGEgPSBnZXRGb3JtRGF0YSgpOyAgICAgICAgIC8vIGdldCB0aGUgdmFsdWVzIHN1Ym1pdHRlZCBpbiB0aGUgZm9ybVxuXG4gICAgLyogT1BUSU9OOiBSZW1vdmUgdGhpcyBjb21tZW50IHRvIGVuYWJsZSBTUEFNIHByZXZlbnRpb24sIHNlZSBSRUFETUUubWRcbiAgICAgaWYgKHZhbGlkYXRlSHVtYW4oZGF0YS5ob25leXBvdCkpIHsgIC8vaWYgZm9ybSBpcyBmaWxsZWQsIGZvcm0gd2lsbCBub3QgYmUgc3VibWl0dGVkXG4gICAgIHJldHVybiBmYWxzZTtcbiAgICAgfVxuICAgICAqL1xuXG4gICAgaWYoIGRhdGEuZW1haWwgJiYgIXZhbGlkRW1haWwoZGF0YS5lbWFpbCkgKSB7ICAgLy8gaWYgZW1haWwgaXMgbm90IHZhbGlkIHNob3cgZXJyb3JcbiAgICAgICAgdmFyIGludmFsaWRFbWFpbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZW1haWwtaW52YWxpZFwiKTtcbiAgICAgICAgaWYgKGludmFsaWRFbWFpbCkge1xuICAgICAgICAgICAgaW52YWxpZEVtYWlsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdXJsID0gZXZlbnQudGFyZ2V0LmFjdGlvbjsgIC8vXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwpO1xuICAgICAgICAvLyB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCB4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCApXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2Zvcm1cIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyAvLyBoaWRlIGZvcm1cbiAgICAgICAgICAgIHZhciB0aGFua1lvdU1lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRoYW5reW91X21lc3NhZ2VcIik7XG4gICAgICAgICAgICBpZiAodGhhbmtZb3VNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhhbmtZb3VNZXNzYWdlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIC8vIHVybCBlbmNvZGUgZm9ybSBkYXRhIGZvciBzZW5kaW5nIGFzIHBvc3QgZGF0YVxuICAgICAgICB2YXIgZW5jb2RlZCA9IE9iamVjdC5rZXlzKGRhdGEpLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGspICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGF0YVtrXSlcbiAgICAgICAgfSkuam9pbignJicpXG4gICAgICAgIHhoci5zZW5kKGVuY29kZWQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvYWRlZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkNvbnRhY3QgZm9ybSBzdWJtaXNzaW9uIGhhbmRsZXIgbG9hZGVkIHN1Y2Nlc3NmdWxseS5cIik7XG4gICAgLy8gYmluZCB0byB0aGUgc3VibWl0IGV2ZW50IG9mIG91ciBmb3JtXG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdmb3JtXCIpO1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBoYW5kbGVGb3JtU3VibWl0LCBmYWxzZSk7XG59O1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbG9hZGVkLCBmYWxzZSk7XG5cbmlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKFwiaW5kZXhcIikgPiAtMSkge1xuICAgIC8vIGdldCBhbGwgZGF0YSBpbiBmb3JtIGFuZCByZXR1cm4gb2JqZWN0XG4gICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEyKCkge1xuICAgICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2Zvcm0yXCIpO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBmb3JtLmVsZW1lbnRzOyAvLyBhbGwgZm9ybSBlbGVtZW50c1xuICAgICAgICB2YXIgZmllbGRzID0gT2JqZWN0LmtleXMoZWxlbWVudHMpLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICBpZihlbGVtZW50c1trXS5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudHNba10ubmFtZTtcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIEVkZ2UncyBodG1sIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIH1lbHNlIGlmKGVsZW1lbnRzW2tdLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50c1trXS5pdGVtKDApLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihpdGVtLCBwb3MsIHNlbGYpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT0gcG9zICYmIGl0ZW07XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihrKXtcbiAgICAgICAgICAgIGRhdGFba10gPSBlbGVtZW50c1trXS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBzdHIgPSBcIlwiOyAvLyBkZWNsYXJlIGVtcHR5IHN0cmluZyBvdXRzaWRlIG9mIGxvb3AgdG8gYWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHRvIGJlIGFwcGVuZGVkIHRvIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGxvb3BcbiAgICAgICAgICAgIGlmKGVsZW1lbnRzW2tdLnR5cGUgPT09IFwiY2hlY2tib3hcIil7IC8vIHNwZWNpYWwgY2FzZSBmb3IgRWRnZSdzIGh0bWwgY29sbGVjdGlvblxuICAgICAgICAgICAgICAgIHN0ciA9IHN0ciArIGVsZW1lbnRzW2tdLmNoZWNrZWQgKyBcIiwgXCI7IC8vIHRha2UgdGhlIHN0cmluZyBhbmQgYXBwZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IGNoZWNrZWQgdmFsdWUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVuZCBvZiBpdCwgYWxvbmcgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGNvbW1hIGFuZCBhIHNwYWNlXG4gICAgICAgICAgICAgICAgZGF0YVtrXSA9IHN0ci5zbGljZSgwLCAtMik7IC8vIHJlbW92ZSB0aGUgbGFzdCBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgIHN0cmluZyB0byBtYWtlIHRoZSBvdXRwdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldHRpZXIgaW4gdGhlIHNwcmVhZHNoZWV0XG4gICAgICAgICAgICB9ZWxzZSBpZihlbGVtZW50c1trXS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtZW50c1trXS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRzW2tdLml0ZW0oaSkuY2hlY2tlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIgKyBlbGVtZW50c1trXS5pdGVtKGkpLnZhbHVlICsgXCIsIFwiOyAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2tdID0gc3RyLnNsaWNlKDAsIC0yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGZvcm0tc3BlY2lmaWMgdmFsdWVzIGludG8gdGhlIGRhdGFcbiAgICAgICAgZGF0YS5mb3JtRGF0YU5hbWVPcmRlciA9IEpTT04uc3RyaW5naWZ5KGZpZWxkcyk7XG4gICAgICAgIGRhdGEuZm9ybUdvb2dsZVNoZWV0TmFtZSA9IGZvcm0uZGF0YXNldC5zaGVldCB8fCBcInJlc3BvbnNlc1wiOyAvLyBkZWZhdWx0IHNoZWV0IG5hbWVcbiAgICAgICAgZGF0YS5mb3JtR29vZ2xlU2VuZEVtYWlsID0gZm9ybS5kYXRhc2V0LmVtYWlsIHx8IFwiXCI7IC8vIG5vIGVtYWlsIGJ5IGRlZmF1bHRcblxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRm9ybVN1Ym1pdDIoZXZlbnQpIHsgIC8vIGhhbmRsZXMgZm9ybSBzdWJtaXQgd2l0aHRvdXQgYW55IGpxdWVyeVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAgICAgICAgICAgLy8gd2UgYXJlIHN1Ym1pdHRpbmcgdmlhIHhociBiZWxvd1xuICAgICAgICB2YXIgZGF0YSA9IGdldEZvcm1EYXRhMigpOyAgICAgICAgIC8vIGdldCB0aGUgdmFsdWVzIHN1Ym1pdHRlZCBpbiB0aGUgZm9ybVxuXG4gICAgICAgIC8qIE9QVElPTjogUmVtb3ZlIHRoaXMgY29tbWVudCB0byBlbmFibGUgU1BBTSBwcmV2ZW50aW9uLCBzZWUgUkVBRE1FLm1kXG4gICAgICAgIGlmICh2YWxpZGF0ZUh1bWFuKGRhdGEuaG9uZXlwb3QpKSB7ICAvL2lmIGZvcm0gaXMgZmlsbGVkLCBmb3JtIHdpbGwgbm90IGJlIHN1Ym1pdHRlZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgKi9cblxuICAgICAgICBpZiggIXZhbGlkRW1haWwoZGF0YS5lbWFpbCkgKSB7ICAgLy8gaWYgZW1haWwgaXMgbm90IHZhbGlkIHNob3cgZXJyb3JcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1pbnZhbGlkMicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHVybCA9IGV2ZW50LnRhcmdldC5hY3Rpb247ICAvL1xuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwpO1xuICAgICAgICAgICAgLy8geGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCB4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dmb3JtMicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIGhpZGUgZm9ybVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aGFua3lvdV9tZXNzYWdlMicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB1cmwgZW5jb2RlIGZvcm0gZGF0YSBmb3Igc2VuZGluZyBhcyBwb3N0IGRhdGFcbiAgICAgICAgICAgIHZhciBlbmNvZGVkID0gT2JqZWN0LmtleXMoZGF0YSkubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGspICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRhdGFba10pXG4gICAgICAgICAgICB9KS5qb2luKCcmJylcbiAgICAgICAgICAgIHhoci5zZW5kKGVuY29kZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvYWRlZDIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb250YWN0IGZvcm0gc3VibWlzc2lvbiBoYW5kbGVyIGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgLy8gYmluZCB0byB0aGUgc3VibWl0IGV2ZW50IG9mIG91ciBmb3JtXG4gICAgICAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dmb3JtMicpO1xuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgaGFuZGxlRm9ybVN1Ym1pdDIsIGZhbHNlKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkZWQyLCBmYWxzZSk7XG59OyJdfQ=="}